/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author airto
 */
public class vistaContorno extends javax.swing.JFrame {

    private BufferedImage originalImage; // Almacena la imagen original
    private BufferedImage editedImage;
    /**
     * Creates new form vistaContorno
     */
    public vistaContorno() {
        initComponents();
        initListeners(); // Inicializa los listeners
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregarImagen = new javax.swing.JButton();
        btnContorno = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAgregarImagen.setText("Agregar Imagen");

        btnContorno.setText("Contorno");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnContorno, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContorno)
                    .addComponent(btnAgregarImagen))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vistaContorno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarImagen;
    private javax.swing.JButton btnContorno;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables

    public void setImageIcon(ImageIcon imageIcon) {
        lblImagen.setIcon(imageIcon);
        lblImagen.setText("");
    }

    public Color showColorChooser() {
        return JColorChooser.showDialog(this, "Elige un color para los labios", Color.RED);
    }

    public void showMessage(String primero_carga_una_imagen) {
        JOptionPane.showMessageDialog(this, "Primero, carga una imagen");
    }

    public JButton getLoadButton() {
        return btnAgregarImagen;
    }

    public JButton getColorButton() {
        return btnContorno;
    }
    
    
    
private void initListeners() {
    btnAgregarImagen.addActionListener(e -> {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(vistaContorno.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                originalImage = ImageIO.read(selectedFile); // Carga la imagen original
                setImageIcon(new ImageIcon(originalImage)); // Muestra la imagen en lblImagen
                
                // Deshabilitar los botones después de cargar la imagen
                btnAgregarImagen.setEnabled(true);
                btnContorno.setEnabled(true);
                
                // Puedes habilitar los botones de nuevo si es necesario aquí
                // por ejemplo, después de aplicar contorno
            } catch (Exception ex) {
                showMessage("Error al cargar la imagen: " + ex.getMessage());
            }
        } else {
            showMessage("No se seleccionó ninguna imagen.");
        }
    });

    btnContorno.addActionListener(e -> {
        if (originalImage == null) {
            showMessage("Primero, carga una imagen");
            return;
        }

        Color color = showColorChooser();
        if (color != null) {
            editedImage = applyContour(originalImage, color); // Aplica el contorno
            setImageIcon(new ImageIcon(editedImage)); // Muestra la imagen editada
            
            // Habilitar los botones nuevamente después de aplicar el contorno
            btnAgregarImagen.setEnabled(true);
            btnContorno.setEnabled(true);
        } else {
            showMessage("No se seleccionó ningún color.");
        }
    });
}

private BufferedImage applyContour(BufferedImage original, Color lipColor) {
    int width = original.getWidth();
    int height = original.getHeight();
    BufferedImage contourImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

    // Definición de un kernel para detectar bordes
    int[][] kernel = {
        {-1, -1, -1},
        {-1,  8, -1},
        {-1, -1, -1}
    };

    // Umbral para decidir si un píxel es un borde
    int threshold = 50; // Ajusta este valor para un efecto más fuerte o más suave

    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            // Aplicar el kernel a la vecindad de 3x3
            int sum = 0;
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    Color neighborColor = new Color(original.getRGB(x + kx, y + ky));
                    int brightness = (int)(0.299 * neighborColor.getRed() + 0.587 * neighborColor.getGreen() + 0.114 * neighborColor.getBlue());
                    sum += brightness * kernel[ky + 1][kx + 1]; // Aplicar el kernel
                }
            }

            // Determinar si el valor calculado indica un borde
            if (sum > threshold) { // Compara con el umbral
                // Ajustar la lógica para definir un área más precisa para los labios
                if (y > height * 3 / 4 && y < height * 7 / 8 && (x > width / 4 && x < (3 * width) / 4)) {
                    // Aplicar el color de labios a la línea y a sus píxeles adyacentes para hacerla más gruesa
                    for (int dy = -2; dy <= 2; dy++) { // Aumentamos el rango de -1 a 1 a -2 a 2
                        for (int dx = -2; dx <= 2; dx++) {
                            if (Math.abs(dx) + Math.abs(dy) <= 2) { // Se aplica a una región más amplia
                                int newX = x + dx;
                                int newY = y + dy;
                                if (newX >= 0 && newX < width && newY >= 0 && newY < height) {
                                    contourImage.setRGB(newX, newY, lipColor.getRGB());
                                }
                            }
                        }
                    }
                } else {
                    contourImage.setRGB(x, y, original.getRGB(x, y)); // Mantener el color original
                }
            } else {
                contourImage.setRGB(x, y, original.getRGB(x, y)); // Mantener el color original
            }
        }
    }
    return contourImage;
}

}


